import java.util.stream.*

task createCbngProductXml << {
    def compileDeps = dependenciesOfConfiguration("compile")
    def testDeps = dependenciesOfConfiguration("testCompile").minus(compileDeps)

    def compileDepsTxt = compileDeps.stream().map({ dep -> "<dep product=\"${dep.name}\" version=\"${dep.version}\" />" }).collect(Collectors.joining(" "))
    def testDepsTxt = testDeps.stream().map({ dep -> "<dep product=\"${dep.name}\" version=\"${dep.version}\" local=\"true\" excluded=\"true\" />" }).collect(Collectors.joining(" "))
    def productVersion = getSnapshotVersion()
    def productName = "tensorics-core"
    def productDirectory = "org/tensorics/tensorics-core"
    def productDescription = "Framework of tensor-like objects for numerical data analysis, statistics and backing of domain objects."
    def productXMLTxt = """<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<products>
	<!-- THIS IS A GENERATED FILE USING GRADLE -->
	<product name=\"${productName}\" version=\"${productVersion}\" directory=\"${productDirectory}\">
		<desc>${productDescription}</desc>
		<dependencies>
			<!-- Runtime -->
			${compileDepsTxt}
			<!-- Testing -->
			${testDepsTxt}
		</dependencies>
	</product>
</products>"""
    new File("./product.xml").withWriter({ out -> out.println productXMLTxt })
}

def dependenciesOfConfiguration(configurationName) {
    def dependencies = []
    allprojects.each({ it.configurations.all.findAll({ !it.allDependencies.empty && it.name.equals(configurationName) }).each({ it.allDependencies.each({ dependencies.add(it) }) }) })
    return dependencies
}

def getSnapshotVersion() {
    def stdout = new ByteArrayOutputStream()

    def execResult = exec {
        commandLine 'git', 'describe', '--tags', '--abbr=10'
        standardOutput = stdout
    }

    if( execResult.getExitValue() != 0 ) {
        println "git describe --tags non 0 exit value. Standard output: ${stdout}. Exit value: ${execResult.getExitValue()}. Rethrowing any failure executing this process"
        execResult.rethrowFailure()
    }

    def versionFromGit = stdout.toString().trim()
    println "Result of git describe --tags --abbrev=10: ${versionFromGit}"
    
    // If it's longer than 50 chars is an error, the version should be small and the sha-1 is limited to 11 digits
    if( versionFromGit.length() > 50 ) {
        throw new RuntimeException("Something is wrong with git describe --tags. Output should be smaller than 50 chars: ${versionFromGit}")
    }
    
    // Skip the v on the version
    def versionStartIndex = versionFromGit.startsWith("v") ? 1 : 0
    // If the latest commit is past the latest tag, the describe command includes the number of commits between the latest tag and the current commit as well as the sha-1 of the commit (which we don't want)
    def versionEndIndex = versionFromGit.contains("-") ? versionFromGit.indexOf("-") : versionFromGit.length()
        
    def version = versionFromGit.substring(versionStartIndex, versionEndIndex);
    
    // Append the SNAPSHOT and timestamp
    //version = version + '-SNAPSHOT-' + new Date().format('yyyyMMddhhmm')

    return version
}
