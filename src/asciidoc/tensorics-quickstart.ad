= Tensorics Quickstart Guide
Kajetan Fuchsberger <kajetan.fuchsberger@cern.ch>
2014-07-12
:icons: font
:sectanchors:
:experimental:
:source-highlighter: highlightjs
:examplesource: src/examples/org/tensorics/core/examples
:sourcecodedir: src/java/org/tensorics/core
:javadoc-baseurl: ../../build/docs/javadoc/org/tensorics
:simple-meteo-example: src/examples/org/tensorics/core/examples/meteo/simple/SimpleMeteoExample.java

== Tensors
The central object of tensorics is a ++Tensor++. The simplest way to imagine a tensor might be to see it as 
a kind of map, where the map-key is actually a 'set of keys'. This 'set of keys' can be seen as a position
in the N-dimensional space - and this is what we will call it: ++Position++ ;-). Each position has exactly N elements (++coordinates++), corresponding to the dimensionality (N) of 
the respective tensor. The ++dimensions++ of a tensor are uniquely defined by the classes of the coordinates.

*_This might have sound complicated - however, an example should make it obvious. Give it a chance and keep on reading ;-)_*

=== The weather example
Lets take a (very simplistic ;-) example: Assume that we are are analyzing weather data. 
We have recorded temperature values for several cities and several days, for example:

.Example Temperatures (random data!)
|===
|City|Day|Temperature [{deg}C]

|New York
|April 1, 2014
|18.5

|New York
|June 1, 2014
|25.0

|Geneva
|April 1, 2014
|19.8

|Geneva
|June 1, 2014
|24.7
|===

These measurements can be represented as a tensor with two dimensions (city and day) and double values. 
Such a tensor can be created as follows: 
[source, java, indent=0]
.Building a Tensor
----
include::{examplesource}/meteo/simple/SimpleMeteoExample.java[tags=createTensor]
----
<1> Create the builder. The dimensions have to be given here. Dimensions are the classes of the coordinates.
<2> Put values to the builder. For each class, given as dimension, exactly one instance has to be given.
<3> Create the tensor. 

Hereby we assumed that the cities and days are defined as constants beforehand (or enum values). Ok, we are aware 
that it is very simplistic assumption and not practical for a real application ;-) The point is, it does not matter: 
Any instance of a java class can serve as a coordinate. However, There are some much more important points to be learned 
from this example:

IMPORTANT: Tensors are always immutable! Therefore always a builder has to be used to create a tensor (or some convenience factory methods).

TIP: There is one global entry point: The ++Tensorics++ class. It provides access to static methods of the most important 
functionality of tensorics. It is convenient to use these methods by putting as a static import to your java files.

CAUTION: The 'put' - like methods in the builder are kind-of-reversed compared to put methods of a map: The parameters for 
coordinates (which basically build the key/position) follow the parameter for the value. This might be 
counter-intuitive at a first glance. However, there is a strong reason for this: The number of coordinates is variable for tensors, 
while there is only one value. Therefore, to take advantage of the java varargs feature, it is necessary to place the 
coordinate-arguments after the value argument.

=== Using Tensors

The simplest way to think of a tensor (in the sense of tensorics) is to imagine a map from positions to values. 
Therefore, values can be retrieved from the tensor in a similar way than from a map:
[source, java, indent=0]
.Getting Values
----
include::{examplesource}/meteo/simple/SimpleMeteoExample.java[tags=getValue]
----
IMPORTANT: All methods in tensorics are designed to fail fast. As a consequence, e.g. the get method will
throw a NoSuchElementException, if the requested element is not contained in the tensor. Further, an 
IllegalArgumentException might be thrown, if the number of the given coordinates do not match the dimensions
of the tensor.

Again similar to maps, there exists also an easy way to loop through the position/value pairs:
[source, java, indent=0]
.Looping through tensor entries
----
include::{examplesource}/meteo/simple/SimpleMeteoExample.java[tags=loopThroughEntries]
----
This would print to the console something like this:
----
[NEW_YORK, APRIL_1_2014]	->	18.5
[GENEVA, APRIL_1_2014]  	->	19.8
[NEW_YORK, JUNE_1_2014] 	->	25.0
[GENEVA, JUNE_1_2014]   	->	24.7
----

=== Tensor Shape
Very often it is useful to see what for which positions in the N-dimensional space values are available within a tensor. 
This is comparable to the key-set of a map. However, there are several important differences:

* Tensors can have different dimensions (number and types of coordinates), while a map has exactly one type of the key. 
This information is very important to compare different tensors, for example to determine if the two tensors are compatible 
for certain operations or not.
* Very often there will be similar tensors, which contain the same positions but different values: For example, if a tensor 
(in mathematics) is multiplied by a scalar value, the resulting tensor will be of the same 'Shape' as the original tensor.

A dedicated object, the link:{javadoc-baseurl}/core/tensor/Shape.html[Shape] holds all this information and can be retrieved from a tensor by the
link:{javadoc-baseurl}/core/tensor/Tensor.html#shape--[shape()] method. Like most objects in the tensorics library, a shape is also an immutable object.

== Structural Operations
In the above example, the get() method of the tensor was used to get values at a certain position. However, you might notice that the API of 
the tensor interface appears to be quite sparse: It contains only the really necessary methods to access the data of the tensor. 
The philosophy of the tensorics library in this context is, that all more complicated manipulations are done by the use of static utility methods.
This allows to easily extend the library by new functionality without breaking the core interfaces. Many of this utility methods are 
implemented such, that they are starting points for fluent clauses, which allows a (hopefully) very expressive and intuitive usage.
The second reason for this decision is, that in this way it is possible to provide an API with the same syntax for other objects,
like numbers or tensor expressions (To be explained later ;-).

So, instead of the above example, which uses the get() method directly, it is equivalent to write:
[source, java, indent=0]
----
include::{simple-meteo-example}[tags=getByStaticMethods]
----
Together, with static imports for the from() method and the enum constants, this reads even nicer as:
[source, java, indent=0]
----
include::{simple-meteo-example}[tags=getByStaticMethodsWithStaticImports]
----

So far, this is of course not very impressive. However, the from(..) clause provides various other methods 
which provide access to the data of the tensor. The most important ones of them are:
.Structural Operations
|===
|clause|description

|from(tensor).get(Object... coordinates);
|Retrieves the value at the given coordinates.

|link:{javadoc-baseurl}/core/tensor/lang/OngoingTensorManipulation.html[from(tensor).extract(Object... coordinates);]
|Extracts the sub tensor at the given coordinates.
|===


== Mathematical Operations

== Fields


=== Tensorbackeds

== Tensor manipulations

=== Operation

++Tensorics++ framework gives you an easy access to the most common calculations and operations you need such as:
 
* adding, subtracting, multiplying and dividing;
* relevant inversion calculation: like negative and 1 over;
* performing a reduction of a tensors with provided behavior:
** we can ++slice++ an input ++tensor++ at given ++coordinate(s)++
** we can ++average++ an input ++tensor++ over specified ++coordinate++
 

In order to have an operation completed a definition of the ++Shape++ has to be introduced - it is a 'raw' view on the coordinates (keys) in the tensor.
An introduction to basic behaviours can be found in following class.
[source,java]
----
include::{sourcecodedir}/lang/ManipulationOptions.java[tags=classdef]
----

Knowing about ++shapes++ it is possible to set/update a ++strategy++ in the framework such that any of the mentioned above operations can 
be performed on a possibly differently shaped tensors for this one has to set proper ++BroadcastingStrategy++. For performing multiplication 
a separate strategy ++filTheNameOfTheStrategy++ is foreseen since 2d tensors might be considered as a matrices for which this operation
looks different.
 
=== Reduction & Merge
Result of such operation  will again be a ++tensor++ but with a simplified/improved set of 
dimensions (accordingly to provided input). Simple, isn't it?
 
Going further (we still stay in an example of temperature and pressure) one could imagine a situation when several cities 
are sending the data built on a base of ++tensor++ with one ++dimension++ (Time) but containing a special ++context++ field
informing about 'higher order' dimensions it can belongs to (ie. Latitude and Longitude of the city). 
A ++Tensorics++ framework gives you and access to ++merge++ utility that will combine all provided tensors into one containing all data. 
This all will of course be only done if all provided inputs will be marked with the same 'higher order' dimensions.
 
Let's consider simple example of three ++dimension++ tensor of temperature and another one (same dimensionality) of an
 atmospheric pressure. Let's define those three dimensions as following:
 
 * Time
 * Latitude 
 * Longitude
 
Let's fill it later with some real data from two decades, with a day sampling for a few European cities. 
 
[source,java]
----
include::{examplesource}/meteo/history/AbstractWeatherHistory.java[tags=import]
----  
  
And let's try to calculate some average temperature at some given latitude. With ++Tensorics++ framework it's easier than you think:

[source,java]
----
include::{examplesource}/meteo/history/WeatherHistoryInEurope.java[tags=import]
----  
    
  
  
== Backing up your objects.

Very often there is a need to access the data in unique, special way. You can use ++Tensor<V>++ objects to hold data and expose it in 
the way you like and need. The thing you need is called ++TensorBacked<V>++ interface that your class has to implement.

TIP: It is good practice to have only one constructor of you domain object that accepts only ++Tensor<V>++ as an argument.
A special ++@Dimensions++ annotation gives the meta data for the framework to know, what dimensions are held inside.

=== Full support for ++TensorBacked<V>++ objects

The framework gives you a full support to perform all calculations (in direct and deferred way) directly with your customized objects.
The return type of the calculation is always the same as the input type.

Let's again start with instantiation of the framework.
[source,java]
----
fullTensoricSupport = Tensors.using(Structures.doubles());
----

Then let's consider an object for our objects that is ++TensorBacked<Double>++ object and simplifies the access to the data. 
It's simple definition looks like the following:

[source,java]
----
include::{examplesource}/MultibeamOrbit.java[tags=classdef]
----

TIP: The ++ Beam.class, Plane.class, Bpm.class++ are the coordinate classes that are declared to be used by ++@Dimensions++ annotation.
