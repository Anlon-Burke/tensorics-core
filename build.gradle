/* Build script */
buildscript {
	repositories {
		if (System.getenv('BUILD_SERVER')) {
			maven {
			    url 'http://artifactory.cern.ch/repo'
			    url 'http://artifactory.cern.ch/jcenter'
		    }
		} else {
			mavenCentral()
			jcenter()
        }
	}

	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.2.6'
		classpath 'org.ow2.asm:asm:5.0.3'  
		
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
//		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:+'
//		classpath 'org.asciidoctor:asciidoctorj:+'
		/* Versions needs to be hardcoded to work properly. */
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.2'
		classpath 'org.asciidoctor:asciidoctorj:1.5.0'
	}
}

apply plugin: 'java'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'

sourceSets {
	main { 
		java { 
			srcDir 'src/java' 
		} 
	}
	test {
		java {
			srcDir 'src/examples'
			srcDir 'src/test'
		}
	}
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

javadoc { options.encoding = "UTF-8" }

cobertura.coverageFormats = ['html', 'xml']
cobertura.coverageSourceDirs = sourceSets.main.java.srcDirs
/* End of build script */

/* Project dependencies */
repositories {
		if (System.getenv('BUILD_SERVER')) {
			maven {
			    url 'http://artifactory.cern.ch/repo'
			    url 'http://artifactory.cern.ch/jcenter'
		    }
		} else {
			mavenCentral()
			jcenter()
        }
}

dependencies {
	compile 'org.jscience:jscience:+'
	compile 'com.google.guava:guava:17.0'
	//TODO: hamcrest-all or hamcrest-core is enough?
	compile 'org.hamcrest:hamcrest-all:+'

	testCompile 'junit:junit:+'
	testCompile 'org.mockito:mockito-core:1.+'
	testCompile 'org.objenesis:objenesis:+'
	testCompile 'com.openpojo:openpojo:+'
		
}

// Deployment
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

group = 'org.tensorics'
archivesBaseName = 'tensorics-core'
version = '0.0.19'

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'tensorics-core'
        packaging 'jar'
        description 'Tensorics is a java framework which uses a tensor as a central object. A tensor represents a set of values placed in an N-dimensional space. Wherever you are tempted to use maps of maps, a tensor might be a good choice ;-) Tensorics provides methods to create, transform and performing calculations with those tensors.'
        url 'http://www.tensorics.org'

        scm {
          connection 'scm:git:http://github.com/tensorics/tensorics-core.git'
          developerConnection 'scm:git:https://github.com/tensorics/tensorics-core.git'
          url 'https://github.com/tensorics/tensorics-core.git'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'andreacalia'
            name 'Andrea Calia'
            email 'andrea.calia.46@gmail.com'
          },
          developer {
            id 'cesar.aguilera'
            name 'Cesar Aguilera'
            email 'cesar.aguilera.p@gmail.com'
          }
        }
        
      }
    }
  }
}
